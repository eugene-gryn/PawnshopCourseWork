@using UIWeb.Client.Components.Alerts
@using UIWeb.Shared.DTOs
@inherits PawnshopModelPageBase
@page "/pawnshop/{Identifier}"
@inject NavigationManager Nav
@inject IDialogService DialogService

<PageTitle>Сторінка ломбарду - завантаження...</PageTitle>


@if (WrongPage.HasValue && WrongPage.Value) {
    <NotFound Message="Ломбард не знайдено"></NotFound>
}
@if (WrongPage.HasValue && !WrongPage.Value) {

    @if (State == PageStates.Create) {
        <PageTitle>Ломбард - створення</PageTitle>
        <div class="container">
            <EditForm OnValidSubmit="() => CreateNewModel(_open!.Value, _close!.Value)" Model="@Model">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <MudTextField class="mb-2" Label="*Назва" @bind-Value="Model.Name" Variant="Variant.Filled"/>
                <MudTextField class="my-2" Label="*Адреса" @bind-Value="Model.Address" Variant="Variant.Filled"/>
                <MudTimePicker class="my-2" Label="*Відкриття" @bind-Time="_open"/>
                <MudTimePicker class="my-2" Label="*Закриття" @bind-Time="_close"/>
                <div>
                    <MudSelect @bind-Value="SelectedCity" T="CityDto" Label="Місто" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var city in Cities) {
                            <MudSelectItem Value="city"/>
                        }
                    </MudSelect>
                </div>
                <div class="my-3">
                    <label>
                        Кількість грошей:
                    </label>
                    <MudNumericField @bind-Value="Model.MoneyAvailable"/>
                </div>

                <div class="d-flex">
                    <button class="btn btn-outline-success mx-auto" style="min-width: 100px" type="submit">Додати</button>
                    <button @onclick="() => Nav.NavigateTo(Nav.BaseUri)"
                            class="btn btn-danger mx-auto"
                            style="min-width: 100px" type="button">Повернутися</button>
                </div>
            </EditForm>
        </div>
    }
    @if (State == PageStates.Read) {
        <PageTitle>@Model.Name - перегляд</PageTitle>
        <div class="container">
          
            <h3 class="mb-5 mt-3 text-center">@Model.Name</h3>

            <div class="d-flex flex-row justify-content-between my-4">
                <p>Адреса:</p>
                <p>@($"м.{City.Name} {Model.Address}")</p>
            </div>

            <div class="d-flex flex-row justify-content-between my-4">
                <p>Відкриття:</p>
                <p>@Model.TimeOpen.ToString("g")</p>
            </div>

            <div class="d-flex flex-row justify-content-between my-4">
                <p>Закриття:</p>
                <p>@Model.TimeClose.ToString("g")</p>
            </div>

            <div class="d-flex flex-row my-4">
                <p class="mx-5" style="margin-left: 0 !important">Кількість грошей в касі:</p>
                <p>@Model.MoneyAvailable</p>
            </div>
            
            <div class="my-2 text-center">
                <a class="btn btn-danger" @onclick="DeleteDialog">Видалити</a>
            </div>

            <h1>TODO Dependencies</h1>
        </div>
    }
    @if (State == PageStates.CityAdd) {
        <PageTitle>Нове місто</PageTitle>

        <div class="container">
            <EditForm OnValidSubmit="AddNewCity" Model="@City">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <MudTextField class="mb-2" Label="*Назва" @bind-Value="City.Name" Variant="Variant.Filled"/>

                <div class="d-flex flex-row justify-content-between">
                    <button class="btn btn-outline-success mx-auto" style="min-width: 100px" type="submit">Додати</button>
                    <button @onclick="() => Nav.NavigateTo(Nav.BaseUri)"
                            class="btn btn-danger mx-auto"
                            style="min-width: 100px" type="button">Повернутися</button>
                </div>

            </EditForm>
        </div>

    }
    @if (State == PageStates.Update) {
        <PageTitle>@Model.Name - редагування</PageTitle>
        <div class="container">
            <EditForm OnValidSubmit="() => UpdateNewModel(_open!.Value, _close!.Value)" Model="@Model">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <MudTextField class="mb-2" Label="*Назва" @bind-Value="Model.Name" Variant="Variant.Filled"/>
                <MudTextField class="my-2" Label="*Адреса" @bind-Value="Model.Address" Variant="Variant.Filled"/>
                <MudTimePicker class="my-2" Label="*Відкриття" @bind-Time="_open"/>
                <MudTimePicker class="my-2" Label="*Закриття" @bind-Time="_close"/>
                <div>
                    <label>Минуле значення - @(Cities.Single(c => c.Id == Model.CityId))</label>
                    <MudSelect @bind-Value="SelectedCity" T="CityDto" Label="Місто" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var city in Cities) {
                            <MudSelectItem Value="city"/>
                        }
                    </MudSelect>
                </div>

                <div class="my-3">
                    <label>
                        Кількість грошей:
                    </label>
                    <MudNumericField @bind-Value="Model.MoneyAvailable"/>
                </div>

                <div class="d-flex flex-row justify-content-between">
                    <button class="btn btn-outline-success mx-auto" style="min-width: 100px" type="submit">Змінити</button>
                    <button @onclick="() => Nav.NavigateTo(Nav.BaseUri)"
                        class="btn btn-danger mx-auto"
                            style="min-width: 100px" type="button">Повернутися</button>
                </div>

            </EditForm>
        </div>
    }
}


@code {
    TimeSpan? _open = new(00, 45, 00);
    TimeSpan? _close = new(00, 45, 00);
    CityDto SelectedCity {
        get => City;
        set => City = value;
    }

    public async Task DeleteDialog() {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var elem = DialogService.Show<YesNoDialogComponent>("Видалення елемента", options);

        var result = await elem.Result;

        if (!result.Cancelled) {
            await DeleteModel();
        }
    }
}