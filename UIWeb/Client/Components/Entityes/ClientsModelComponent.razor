@using UIWeb.Client.Services
@using UIWeb.Shared.DTOs
@using MudBlazor.Extensions
@inherits ComponentBase
@inject ApiClientService Server
@inject IDialogService DialogService


<div class="container">
    @if (Customers == null) {
        <Loading/>
    }
    @if (Customers != null) {
        <div class="m-3">
            <MudTable Items="@Customers"
                      Dense="false"
                      Hover="true"
                      ReadOnly="false"
                      CanCancelEdit="true"
                      Filter="new Func<CustomerDto, bool>(FilterFunc)"
                      @bind-SelectedItem="SelectedItem"
                      SortLabel="Сортувати за.."
                      CommitEditTooltip="Зберегти"
                      CancelEditTooltip="Видалити"
                      OnCommitEditClick="@(CommitEdit)"
                      RowEditPreview="BackupItem"
                      RowEditCancel="async obj => await RemoveOrResetValue(obj)"
                      RowEditCommit="async args => await ItemHasBeenCommitted(args)"
                      IsEditRowSwitchingBlocked="true"
                      ApplyButtonPosition="@TableApplyButtonPosition.End">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">@Text</MudText>
                    @if (!Dependent) {
                        <MudButton OnClick="LoadMoreToTable"
                                   ButtonType="ButtonType.Button" Variant="Variant.Filled"
                                   EndIcon="@Icons.Material.Filled.Add" Color="Color.Success" Class="mx-2">
                            Завантажити ще
                        </MudButton>
                    }

                    <MudSpacer/>
                    @if (!Dependent) {
                        <MudTextField @bind-Value="_searchStringName" TextChanged="QueryTextChangedName"
                                      Placeholder="Пошук за даними"
                                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mx-1">
                        </MudTextField>
                        <MudTextField @bind-Value="_searchStringPosition" TextChanged="QueryTextChangedPosition"
                                      Placeholder="Пошук за серією та номером"
                                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mx-1">
                        </MudTextField>
                    }
                </ToolBarContent>
                <ColGroup>
                    <col style="width: 20%;"/>
                    <col style="width: 20%;"/>
                    <col style="width: 20%;"/>
                    <col style="width: 10%;"/>
                    <col style="width: 15%;"/>
                    <col style="width: 15%;"/>
                </ColGroup>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<CustomerDto, object>(x => x.FirstName)">Ім'я</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<CustomerDto, object>(x => x.SecondName)">Прізвище</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<CustomerDto, object>(x => x.ThirdName)">По-Батькові</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<CustomerDto, object>(x => x.Serial)">Серія</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<CustomerDto, object>(x => x.Number)">Номер</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<CustomerDto, object>(x => x.Birthday)">День народження</MudTableSortLabel>
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Ім'я'">@context.FirstName</MudTd>
                    <MudTd DataLabel="Прізвище">@context.SecondName</MudTd>
                    <MudTd DataLabel="По-Батькові">@context.ThirdName</MudTd>
                    <MudTd DataLabel="Серія">@context.Serial</MudTd>
                    <MudTd DataLabel="Номер плата">@context.Number</MudTd>
                    <MudTd DataLabel="День народження">@context.Birthday.ToIsoDateString()</MudTd>
                </RowTemplate>
                <RowEditingTemplate>
                    <MudTd DataLabel="Ім'я">
                        <MudTextField @bind-Value="@context.FirstName" Required/>
                    </MudTd>
                    <MudTd DataLabel="Прізвище">
                        <MudTextField @bind-Value="@context.SecondName" Required/>
                    </MudTd>
                    <MudTd DataLabel="По-Батькові">
                        <MudTextField @bind-Value="@context.ThirdName"/>
                    </MudTd>
                    <MudTd DataLabel="Серія">
                        <MudTextField @bind-Value="@context.Serial" Required/>
                    </MudTd>
                    <MudTd DataLabel="Номер">
                        <MudTextField @bind-Value="@context.Number" Required/>
                    </MudTd>
                </RowEditingTemplate>
                <PagerContent>
                    <MudTablePager/>
                </PagerContent>
            </MudTable>
            @if (!Dependent) {
                <div class="mt-4 p-2 border-2 border-dark rounded">
                    <MudText Typo="Typo.h6">Створення нового клієнта:</MudText>
                    <EditForm Model="@_createModel" OnValidSubmit="async () => await CreateNewModel()">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>

                        <MudTextField Class="mb-2" Label="*Ім'я'" @bind-Value="_createModel.FirstName" Variant="Variant.Filled"/>
                        <MudTextField Class="mb-2" Label="*Прізвище" @bind-Value="_createModel.SecondName" Variant="Variant.Filled"/>
                        <MudTextField Class="mb-2" Label="По-Батькові" @bind-Value="_createModel.ThirdName" Variant="Variant.Filled"/>
                        <MudTextField Class="mb-2" Label="*Серія паспорту" @bind-Value="_createModel.Serial" Variant="Variant.Filled"/>
                        <MudTextField Class="mb-2" Label="*Номер паспорту" @bind-Value="_createModel.Number" Variant="Variant.Filled"/>
                        <MudDatePicker Label="День народження" @bind-Date="_createModel.Birthday" Editable="true" Placeholder="Виберіть дату" />
                        <hr/>

                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Add" Color="Color.Success" Class="mt-3">Створити</MudButton>
                    </EditForm>


                </div>
            }

        </div>
    }

</div>

@code {

    protected override async Task<Task> OnParametersSetAsync() {
        if (!Dependent)
        Positions = await Server.GetWorkerPositions();

        return base.OnParametersSetAsync();
    }

    [Parameter]
    public bool Dependent { get; set; }

    [Parameter]
    public string Text { get; set; }


    #region Table

    CustomerDto SelectedItem;

    [Parameter]
    public List<CustomerDto>? Customers { get; set; }

    [Parameter]
    public EventCallback UpdateTable { get; set; }


    public List<WorkerPositionDto>? Positions { get; set; }


    private bool FilterFunc(CustomerDto arg) {
        return true;
    }

    private void CommitEdit() {
    }

    private void BackupItem(object obj) {
        SelectedItem = new CustomerDto(obj as CustomerDto);
    }

    private async Task RemoveOrResetValue(object obj) {
        var el = obj as CustomerDto;

        if (el != null) {
            el.Restore(SelectedItem);

            var options = new DialogOptions {CloseOnEscapeKey = true};

            var res = DialogService
                .Show<YesNoDialogComponent>($"Видалення клієнта {el.FirstName}?", options);

            var result = await res.Result;

            if (!result.Cancelled) {
                await Server.CustomerDelete(el.Id);
                await UpdateTable.InvokeAsync();
            }
        }
    }

    private async Task ItemHasBeenCommitted(object obj) {
        if (obj is CustomerDto el) {
            await Server.CustomerUpdate(el);
        }
    }

    #endregion


    #region Dependent

    bool searchByPosition = false;

    int Limit = 10;

    private async Task SearchByQueryWorkers(string attribute, string? query) {
        if (string.IsNullOrEmpty(query)) {
            Customers = await Server.CustomerGetAll(Limit, 0, "");
            return;
        }

        Customers = await Server.CustomerSearchByAttribute(attribute, query, Limit, 0);
    }

    private async Task QueryTextChangedName() {
        if (_searchStringName != null) await SearchByQueryWorkers("Name", _searchStringName);
    }

    private async Task QueryTextChangedPosition() {
        if (_searchStringPosition != null) await SearchByQueryWorkers("SerialNumber", _searchStringPosition);
    }

    private async Task LoadMoreToTable() {
        Limit += 10;

        Customers = await Server.CustomerGetAll(Limit, 0, "");
    }

    private string? _searchStringName;
    private string? _searchStringPosition;

    #endregion


    #region Creation


    #region CreatePosition

    private bool _modeCreationPosition = false;

    private string? _positionTextName;

    private async Task OnCreatePositionButtonClick() {
        Console.WriteLine($"Create position {_positionTextName}");

        if (!string.IsNullOrEmpty(_positionTextName)) {
            await Server.AddWorkerPosition(new WorkerPositionDto {Name = _positionTextName});
        }

        _positionTextName = string.Empty;
        Positions = await Server.GetWorkerPositions();
    }

    #endregion


    CustomerDto _createModel = new();


    private async Task CreateNewModel() {

        await Server.CustomerAdd(_createModel);

        _createModel = new();

        Customers = await Server.CustomerGetAll(Limit, 0, "");
    }

    #endregion


}