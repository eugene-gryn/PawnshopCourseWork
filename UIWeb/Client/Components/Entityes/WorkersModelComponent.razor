@using UIWeb.Client.Services
@using UIWeb.Shared.DTOs
@inherits ComponentBase
@inject ApiClientService Server
@inject IDialogService DialogService


<div class="container">
    @if (Workers == null) {
        <Loading/>
    }
    @if (Workers != null) {
        <div class="m-3">
            <MudTable Items="@Workers"
                      Dense="false"
                      Hover="true"
                      ReadOnly="false"
                      CanCancelEdit="true"
                      Filter="new Func<WorkerDto, bool>(FilterFunc)"
                      @bind-SelectedItem="SelectedItem"
                      SortLabel="Сортувати за.."
                      CommitEditTooltip="Зберегти"
                      CancelEditTooltip="Видалити"
                      OnCommitEditClick="@(CommitEdit)"
                      RowEditPreview="BackupItem"
                      RowEditCancel="async obj => await RemoveOrResetValue(obj)"
                      RowEditCommit="async args => await ItemHasBeenCommitted(args)"
                      IsEditRowSwitchingBlocked="true"
                      ApplyButtonPosition="@TableApplyButtonPosition.End">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">@Text</MudText>
                    @if (!Dependent) {
                        <MudButton OnClick="LoadMoreToTable"
                                   ButtonType="ButtonType.Button" Variant="Variant.Filled"
                                   EndIcon="@Icons.Material.Filled.Add" Color="Color.Success" Class="mx-2">
                            Завантажити ще
                        </MudButton>
                    }

                    <MudSpacer/>
                    @if (!Dependent) {
                        <MudTextField @bind-Value="searchStringName" TextChanged="QueryTextChangedName" 
                                      Placeholder="Пошук за назвою"
                                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mx-1"></MudTextField>
                        <MudTextField @bind-Value="searchStringPosition" TextChanged="QueryTextChangedPosition" 
                                      Placeholder="Пошук за позицією"
                                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mx-1"></MudTextField>
                    }
                </ToolBarContent>
                <ColGroup>
                    <col style="width: 25%;"/>
                    <col style="width: 25%;"/>
                    <col style="width: 25%;"/>
                    <col style="width: 15%;"/>
                    <col style="width: 10%;"/>
                </ColGroup>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<WorkerDto, object>(x => x.FirstName)">Ім'я</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<WorkerDto, object>(x => x.SecondName)">Прізвище</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<WorkerDto, object>(x => x.ThirdName)">По-Батькові</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<WorkerDto, object>(x => x.PositionId)">Позиція</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<WorkerDto, object>(x => x.Salary)">Заробітна плата</MudTableSortLabel>
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Ім'я'">@context.FirstName</MudTd>
                    <MudTd DataLabel="Прізвище">@context.SecondName</MudTd>
                    <MudTd DataLabel="По-Батькові">@context.ThirdName</MudTd>
                    <MudTd DataLabel="Позиція">@context.Position.Name</MudTd>
                    <MudTd DataLabel="Заробітна плата">@context.Salary</MudTd>
                </RowTemplate>
                <RowEditingTemplate>
                    <MudTd DataLabel="Ім'я">
                        <MudTextField @bind-Value="@context.FirstName" Required/>
                    </MudTd>
                    <MudTd DataLabel="Прізвище">
                        <MudTextField @bind-Value="@context.SecondName" Required/>
                    </MudTd>
                    <MudTd DataLabel="По-Батькові">
                        <MudTextField @bind-Value="@context.ThirdName" Required/>
                    </MudTd>
                    <MudTd DataLabel="Позиція">
                        <MudSelect @bind-Value="@context.Position" T="WorkerPositionDto" 
                                   Label="Позиція" Variant="Variant.Filled"
                                   AnchorOrigin="Origin.BottomCenter">
                            @if (Positions != null) {
                                foreach (var position in Positions) {
                                    <MudSelectItem Value="@position"/>
                                }
                            }
                        </MudSelect >
                    </MudTd>
                    <MudTd DataLabel="Заробітна плата">
                        <MudNumericField @bind-Value="@context.Salary" Required Min="1"/>
                    </MudTd>
                </RowEditingTemplate>
                <PagerContent>
                    <MudTablePager/>
                </PagerContent>
            </MudTable>
            @if (!Dependent) {
                <div class="mt-4 p-2 border-2 border-dark rounded">
                    <MudText Typo="Typo.h6">Створення нового робітника:</MudText>
                    <EditForm Model="@CreateModel" OnValidSubmit="async () => await CreateNewModel()">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>

                        <MudTextField class="mb-2" Label="*Ім'я'" @bind-Value="CreateModel.FirstName" Variant="Variant.Filled"/>
                        <MudTextField class="mb-2" Label="*Прізвище" @bind-Value="CreateModel.SecondName" Variant="Variant.Filled"/>
                        <MudTextField class="mb-2" Label="*По-Батькові" @bind-Value="CreateModel.ThirdName" Variant="Variant.Filled"/>
                        <MudNumericField @bind-Value="CreateModel.Salary" Label="Заробітна плата" Variant="Variant.Filled" Min="0" Max="800000"/>

                        <hr/>

                        <MudSwitch @bind-Checked="@_modeCreationPosition" Label="Створення позиції" Color="Color.Info" Class="my-2"/>

                        <div class="d-flex flex-row flex-wrap">
                            @if (_modeCreationPosition) {
                                <MudTextField @bind-Value="_positionTextName" Label="Нова позиція" Variant="Variant.Outlined"></MudTextField>
                                <MudButton OnClick="OnCreatePositionButtonClick" Class="mx-2" Variant="Variant.Text" Color="Color.Success">Додати</MudButton>
                            }
                            @if (!_modeCreationPosition) {
                                <MudAutocomplete T="WorkerPositionDto"
                                                 Label="Позиція" @bind-Value="@CreateModel.Position"
                                                 SearchFunc="s => OnPositionSelectQueryChangedFunc(s)" Variant="Variant.Outlined"
                                                 ShowProgressIndicator="true" ProgressIndicatorColor="Color.Warning"/>
                            }
                        </div>


                        <hr/>

                        <div class="my-2">
                            <MudAutocomplete T="PawnshopDto"
                                             Label="Ломбард" @bind-Value="CreateModel.Pawnshop"
                                             SearchFunc="s => OnPawnshopSelectQueryChangedFunc(s)" Variant="Variant.Outlined"
                                             ShowProgressIndicator="true" ProgressIndicatorColor="Color.Warning"/>
                        </div>

                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Add" Color="Color.Success" Class="mt-3">Створити</MudButton>
                    </EditForm>


                </div>
            }

        </div>
    }

</div>

@code {

    protected override async Task<Task> OnParametersSetAsync() {
        Positions = await Server.GetWorkerPositions();

        return base.OnParametersSetAsync();
    }

    [Parameter]
    public bool Dependent { get; set; }

    [Parameter]
    public string Text { get; set; }


    #region Table

    WorkerDto SelectedItem;

    [Parameter]
    public List<WorkerDto>? Workers { get; set; }

    [Parameter]
    public EventCallback UpdateTable { get; set; }


    public List<WorkerPositionDto>? Positions { get; set; }


    private bool FilterFunc(WorkerDto arg) {
        return true;
    }

    private void CommitEdit() {
        if (Positions != null) SelectedItem.Position = Positions.First();
    }

    private void BackupItem(object obj) {
        SelectedItem = new WorkerDto(obj as WorkerDto);
    }

    private async Task RemoveOrResetValue(object obj) {
        var el = obj as WorkerDto;

        if (el != null) {
            el.Restore(SelectedItem);

            var options = new DialogOptions {CloseOnEscapeKey = true};

            var res = DialogService
                .Show<YesNoDialogComponent>($"Видалення користувача {el.FirstName}?", options);

            var result = await res.Result;

            if (!result.Cancelled) {
                await Server.WorkerDelete(el.Id);
                await UpdateTable.InvokeAsync();
            }
        }
    }

    private async Task ItemHasBeenCommitted(object obj) {
        if (obj is WorkerDto el) {
            el.PositionId = el.Position.Id;
            await Server.WorkerUpdate(el);
        }
    }

    #endregion


    #region Dependent

    bool searchByPosition = false;

    int Limit = 10;

    private async Task SearchByQueryWorkers(string attribute, string query) {
        if (string.IsNullOrEmpty(searchStringName)) 
            Workers = await Server.WorkerGetAll(Limit, 0, "Pawnshop,Position");
        else if (searchStringName != null) 
            Workers = await Server.WorkerSearchByAttribute(attribute, query, Limit, 0);
    }

    private async Task QueryTextChangedName() {
        await SearchByQueryWorkers("Name", searchStringName);
    }
    private async Task QueryTextChangedPosition() {
        await SearchByQueryWorkers("Position", searchStringPosition);

    }

    private async Task LoadMoreToTable() {
        Limit += 10;

        Workers = await Server.WorkerGetAll(Limit, 0, "Pawnshop,Position");
    }

    private string? searchStringName;
    private string? searchStringPosition;

    #endregion


    #region Creation


    #region CreatePosition

    private bool _modeCreationPosition = false;

    private string _positionTextName;

    private async Task OnCreatePositionButtonClick() {
        Console.WriteLine($"Create position {_positionTextName}");

        if (!string.IsNullOrEmpty(_positionTextName)) {
            await Server.AddWorkerPosition(new WorkerPositionDto {Name = _positionTextName});
        }

        _positionTextName = string.Empty;
        Positions = await Server.GetWorkerPositions();
    }

    #endregion


    WorkerDto CreateModel = new();

    private async Task<IEnumerable<PawnshopDto>> OnPawnshopSelectQueryChangedFunc(string s) {
        if (string.IsNullOrEmpty(s)) {
            var list = await Server.PawnshopList(10, 0);
            if (list != null) return list;
        }

        return await Server.PawnshopSearchByAttribute("Name", s, 10, 0);
    }

    private async Task<IEnumerable<WorkerPositionDto>> OnPositionSelectQueryChangedFunc(string s) {
        if (String.IsNullOrEmpty(s)) return Positions ?? new List<WorkerPositionDto>();

        return await Server.GetWorkerPositions() ?? new List<WorkerPositionDto>();
    }

    private async Task CreateNewModel() {
        CreateModel.PositionId = CreateModel.Position.Id;
        CreateModel.PawnshopId = CreateModel.Pawnshop.Id;

        await Server.WorkerAdd(CreateModel);

        CreateModel = new WorkerDto();

        Workers = await Server.WorkerGetAll(Limit, 0, "");
    }

    #endregion


}