// <auto-generated />
using System;
using DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(PawnshopDbContext))]
    [Migration("20221031160825_CheckValueInit")]
    partial class CheckValueInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAccessLayer.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("VARCHAR(9)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Serial")
                        .HasMaxLength(2)
                        .HasColumnType("VARCHAR(2)");

                    b.Property<string>("ThirdName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasCheckConstraint("CHK_DateIsGrater18", "(DATEDIFF(year, Birthday, GETDATE()) > 17)");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Make", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Close")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("Income")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<float>("IssuancePercent")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PawnshopId")
                        .HasColumnType("int");

                    b.Property<int?>("PawnshopId1")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.Property<int?>("WorkerId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("WorkerId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("PawnshopId");

                    b.HasIndex("PawnshopId1");

                    b.HasIndex("WorkerId");

                    b.HasIndex("WorkerId1");

                    b.ToTable("Makes");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId1")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("OperationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("OperationTypeId1")
                        .HasColumnType("int");

                    b.Property<int>("PawnshopId")
                        .HasColumnType("int");

                    b.Property<int?>("PawnshopId1")
                        .HasColumnType("int");

                    b.Property<int?>("Sum")
                        .HasColumnType("int");

                    b.Property<int?>("WorkerId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("WorkerId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("OperationTypeId");

                    b.HasIndex("OperationTypeId1");

                    b.HasIndex("PawnshopId");

                    b.HasIndex("PawnshopId1");

                    b.HasIndex("WorkerId");

                    b.HasIndex("WorkerId1");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("DataAccessLayer.Models.OperationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("OperationTypes");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Pawnshop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId1")
                        .HasColumnType("int");

                    b.Property<float>("MoneyAvailable")
                        .HasColumnType("real");

                    b.Property<int>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeClose")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeOpen")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CityId1");

                    b.ToTable("Pawnshops");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("PawnshopId")
                        .HasColumnType("int");

                    b.Property<int?>("PawnshopId1")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ThirdName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("WorkerPositionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PawnshopId");

                    b.HasIndex("PawnshopId1");

                    b.HasIndex("PositionId");

                    b.HasIndex("WorkerPositionId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("DataAccessLayer.Models.WorkerPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("WorkerPositions");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Make", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Customer", null)
                        .WithMany("Makes")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("DataAccessLayer.Models.Pawnshop", "Pawnshop")
                        .WithMany()
                        .HasForeignKey("PawnshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Pawnshop", null)
                        .WithMany("Makes")
                        .HasForeignKey("PawnshopId1");

                    b.HasOne("DataAccessLayer.Models.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Worker", null)
                        .WithMany("Mades")
                        .HasForeignKey("WorkerId1");

                    b.Navigation("Customer");

                    b.Navigation("Pawnshop");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Operation", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Customer", null)
                        .WithMany("Operations")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("DataAccessLayer.Models.OperationType", null)
                        .WithMany()
                        .HasForeignKey("OperationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.OperationType", null)
                        .WithMany("Operations")
                        .HasForeignKey("OperationTypeId1");

                    b.HasOne("DataAccessLayer.Models.Pawnshop", "Pawnshop")
                        .WithMany()
                        .HasForeignKey("PawnshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Pawnshop", null)
                        .WithMany("Operations")
                        .HasForeignKey("PawnshopId1");

                    b.HasOne("DataAccessLayer.Models.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Worker", null)
                        .WithMany("Operations")
                        .HasForeignKey("WorkerId1");

                    b.Navigation("Customer");

                    b.Navigation("Pawnshop");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Pawnshop", b =>
                {
                    b.HasOne("DataAccessLayer.Models.City", null)
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.City", null)
                        .WithMany("Pawns")
                        .HasForeignKey("CityId1");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Worker", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Pawnshop", "Pawnshop")
                        .WithMany()
                        .HasForeignKey("PawnshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Pawnshop", null)
                        .WithMany("Workers")
                        .HasForeignKey("PawnshopId1");

                    b.HasOne("DataAccessLayer.Models.WorkerPosition", null)
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.WorkerPosition", null)
                        .WithMany("Workers")
                        .HasForeignKey("WorkerPositionId");

                    b.Navigation("Pawnshop");
                });

            modelBuilder.Entity("DataAccessLayer.Models.City", b =>
                {
                    b.Navigation("Pawns");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Customer", b =>
                {
                    b.Navigation("Makes");

                    b.Navigation("Operations");
                });

            modelBuilder.Entity("DataAccessLayer.Models.OperationType", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Pawnshop", b =>
                {
                    b.Navigation("Makes");

                    b.Navigation("Operations");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Worker", b =>
                {
                    b.Navigation("Mades");

                    b.Navigation("Operations");
                });

            modelBuilder.Entity("DataAccessLayer.Models.WorkerPosition", b =>
                {
                    b.Navigation("Workers");
                });
#pragma warning restore 612, 618
        }
    }
}
